# -*- coding: utf-8 -*-
"""Q7_forecast.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1QygJyzTuf4wJ3ioxCqF0boFIbPNbBJd6
"""

import numpy as np

#TODO : Write here

from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
import os
from os import path

if not path.exists('Plots/Question7/'):
    os.makedirs('Plots/Question7/')
# Load the dataset
url = "https://raw.githubusercontent.com/jbrownlee/Datasets/master/daily-min-temperatures.csv"
df = pd.read_csv(url, header=0, index_col=0)

split_date = '1989-06-27'
split_index = df.index.get_loc(split_date)

# Create lagged variables
lags = 30
for i in range(1, lags+1):
    df[f't-{i}'] = df['Temp'].shift(i)

# Remove missing values
df.dropna(inplace=True)

# Split the dataset into training and testing sets
#X_train, X_test, y_train, y_test = train_test_split(df.values[:-1], df.values[1:], test_size=0.33, random_state=42)
train, test = df.iloc[:split_index], df.iloc[split_index:]
X_train, y_train = train.iloc[:, 1:], train['Temp']
X_test, y_test = test.iloc[:, 1:], test['Temp']

print(X_train)
# Fit a linear regression model to the training data
reg = LinearRegression().fit(X_train, y_train)

# Use the trained model to make predictions on the testing set
y_pred = reg.predict(X_test)

# Evaluate the model's performance using the root mean squared error (RMSE)
rmse = np.sqrt(mean_squared_error(y_test, y_pred))
print("RMSE:", rmse)

# Plot the fit of your predictions vs. the true values
plt.plot(y_test, label="True Values")
plt.plot(y_pred, label="Predictions")
plt.legend()
plt.show()


plt.plot(y_test.values, label='true')
plt.plot(y_pred, label='predicted')
plt.legend()
plt.savefig('./Plots/Question7/q7_forecast.png')


